public class util.objectpool.BufferPool extends android.app.Application
{
    private java.util.HashMap pool;

    public void <init>()
    {
        util.objectpool.BufferPool this;
        java.util.HashMap temp$0;

        this := @this: util.objectpool.BufferPool;

        specialinvoke this.<android.app.Application: void <init>()>();

        temp$0 = new java.util.HashMap;

        specialinvoke temp$0.<java.util.HashMap: void <init>()>();

        this.<util.objectpool.BufferPool: java.util.HashMap pool> = temp$0;

        return;
    }

    public boolean isObjInPool(java.lang.String)
    {
        util.objectpool.BufferPool this;
        java.lang.String c;
        java.util.HashMap temp$0, temp$2;
        boolean temp$1, temp$5, temp$6, temp$7;
        java.lang.Object temp$3;
        util.objectpool.ObjectPool temp$4;

        this := @this: util.objectpool.BufferPool;

        c := @parameter0: java.lang.String;

        temp$0 = this.<util.objectpool.BufferPool: java.util.HashMap pool>;

        temp$1 = virtualinvoke temp$0.<java.util.HashMap: boolean containsKey(java.lang.Object)>(c);

        if temp$1 == 0 goto label3;

        goto label1;

     label1:
        temp$2 = this.<util.objectpool.BufferPool: java.util.HashMap pool>;

        temp$3 = virtualinvoke temp$2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(c);

        temp$4 = (util.objectpool.ObjectPool) temp$3;

        temp$5 = virtualinvoke temp$4.<util.objectpool.ObjectPool: boolean hasObject()>();

        if temp$5 == 0 goto label3;

        goto label2;

     label2:
        temp$6 = 1;

        return temp$6;

     label3:
        temp$7 = 0;

        return temp$7;
    }

    public java.lang.Object getObject(java.lang.String)
    {
        util.objectpool.BufferPool this;
        java.lang.String c;
        java.util.HashMap temp$0;
        java.lang.Object temp$1, temp$3;
        util.objectpool.ObjectPool temp$2;

        this := @this: util.objectpool.BufferPool;

        c := @parameter0: java.lang.String;

        temp$0 = this.<util.objectpool.BufferPool: java.util.HashMap pool>;

        temp$1 = virtualinvoke temp$0.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(c);

        temp$2 = (util.objectpool.ObjectPool) temp$1;

        temp$3 = virtualinvoke temp$2.<util.objectpool.ObjectPool: java.lang.Object getObject()>();

        return temp$3;
    }

    public void saveObject(java.lang.String, java.lang.Object)
    {
        util.objectpool.BufferPool this;
        java.lang.String c;
        java.lang.Object o, temp$4, temp$7;
        java.util.HashMap temp$0, temp$3, temp$6;
        boolean temp$1;
        util.objectpool.ObjectPool mypool, temp$2, temp$5, temp$8;

        this := @this: util.objectpool.BufferPool;

        c := @parameter0: java.lang.String;

        o := @parameter1: java.lang.Object;

        temp$0 = this.<util.objectpool.BufferPool: java.util.HashMap pool>;

        temp$1 = virtualinvoke temp$0.<java.util.HashMap: boolean containsKey(java.lang.Object)>(c);

        if temp$1 == 0 goto label1;

        goto label2;

     label1:
        temp$2 = new util.objectpool.ObjectPool;

        specialinvoke temp$2.<util.objectpool.ObjectPool: void <init>(int)>(400);

        mypool = temp$2;

        temp$3 = this.<util.objectpool.BufferPool: java.util.HashMap pool>;

        temp$4 = virtualinvoke temp$3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(c, mypool);

        temp$5 = (util.objectpool.ObjectPool) temp$4;

     label2:
        temp$6 = this.<util.objectpool.BufferPool: java.util.HashMap pool>;

        temp$7 = virtualinvoke temp$6.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(c);

        temp$8 = (util.objectpool.ObjectPool) temp$7;

        virtualinvoke temp$8.<util.objectpool.ObjectPool: void freeObject(java.lang.Object)>(o);

        return;
    }
}
